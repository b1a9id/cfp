---
resource_types:
- name: pull-request
  type: docker-image
  source:
    repository: jtarchie/pr
- name: slack-notification
  type: docker-image
  source:
    repository: cfcommunity/slack-notification-resource
    tag: v1.1.3
resources:
  - name: cfp-repo
    type: git
    check_every: 10000h
    webhook_token: {{webhook-token}}
    source:
      uri: git@github.com:jjug-ccc/cfp.git
      branch: master
      private_key: {{github-private-key}}
  - name: cf
    type: cf
    source:
      api: {{cf-api}}
      username: {{cf-username}}
      password: {{cf-password}}
      organization: {{cf-org}}
      space: production
      skip_cert_check: true
  - name: cfp-repo-pr
    type: pull-request
    check_every: 10000h
    webhook_token: {{webhook-token}}
    source:
      repo: jjug-ccc/cfp
      uri: git@github.com:jjug-ccc/cfp.git
      access_token: {{github-access-token}}
      private_key: {{github-private-key}}
  - name: mysql
    type: docker-image
    source:
      repository: mariadb
      tag: 10.0.30
  - name: slack-alert
    type: slack-notification
    source:
      url: ((slack-webhook-url))
jobs:
  - name: cfp-unit-test-pr
    build_logs_to_retain: 5
    public: true
    plan:
    - aggregate:
      - get: repo
        resource: cfp-repo-pr
        trigger: true
      - get: mysql
        params:
          save: true
    - put: cfp-repo-pr
      params:
        path: repo
        status: pending
    - task: unit
      privileged: true
      params: &JAVA_OPS
        _JAVA_OPTIONS: -Duser.timezone=Asia/Tokyo -Duser.language=ja -Duser.country=JP -Djava.security.egd=file:/dev/./urandom
      config: &MVN_TEST_CONFIG
        platform: linux
        image_resource:
          type: docker-image
          source:
            repository: making/dcind-jdk
        inputs:
        - name: repo
        - name: mysql
        caches:
        - path: repo/m2
        run:
          path: sh
          args:
          - -c
          - |
            set -e
            source /docker-lib.sh
            start_docker
            docker load -i mysql/image
            docker tag "$(cat mysql/image-id)" "$(cat mysql/repository):$(cat mysql/tag)"
            docker images
            cd repo
            rm -rf ~/.m2
            ln -fs $(pwd)/m2 ~/.m2
            cd ci
            docker-compose up -d
            sleep 3
            mvn test -f ..
            docker-compose down
      on_success:
        do:
        - put: cfp-repo-pr
          params:
            path: repo
            status: success
        - put: slack-alert
          params:
            <<: *SLACK_SUCCESS
      on_failure:
        do:
        - put: cfp-repo-pr
          params:
            path: repo
            status: failure
        - put: slack-alert
          params:
            <<: *SLACK_FAILURE
  - name: cfp-unit-test
    build_logs_to_retain: 5
    public: true
    plan:
    - aggregate:
      - get: repo
        resource: cfp-repo
        trigger: true
      - get: mysql
        params:
          save: true
    - task: unit
      privileged: true
      params: &JAVA_OPS
        _JAVA_OPTIONS: -Duser.timezone=Asia/Tokyo -Duser.language=ja -Duser.country=JP -Djava.security.egd=file:/dev/./urandom
      config:
        <<: *MVN_TEST_CONFIG
      on_failure:
        put: slack-alert
        params:
          <<: *SLACK_FAILURE
  - name: cfp-deploy-to-cf
    serial: true
    plan:
    - aggregate:
      - get: repo
        resource: cfp-repo
        trigger: true
        passed:
        - cfp-unit-test
    - task: package
      config:
        platform: linux
        image_resource:
          type: docker-image
          source:
            repository: maven
        inputs:
        - name: repo
        outputs:
        - name: output
        caches:
        - path: repo/cache
        run:
          path: sh
          dir: repo
          args:
          - -c
          - |
            rm -rf ~/.m2
            ln -fs $(pwd)/cache ~/.m2
            mvn package -DskipTests=true
            cp target/*.jar ../output/app.jar
      on_failure:
        put: slack-alert
        params:
          <<: *SLACK_FAILURE
    - put: cf
      params:
        manifest: repo/manifest.yml
        path: output/app.jar
        current_app_name: jjug-cfp
        env:
          cfp.cloud.max-pool-size: 40
          server.tomcat.max-threads: 60
      on_failure:
        put: slack-alert
        params:
          <<: *SLACK_FAILURE
      on_success:
        put: slack-alert
        params:
          <<: *SLACK_SUCCESS

params:
  slack_on_success_params: &SLACK_SUCCESS
    channel: '#cfp'
    text: |
      <!here> :white_check_mark: *$BUILD_PIPELINE_NAME/$BUILD_JOB_NAME* succeeded with build <$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|$BUILD_NAME>!
  slack_on_failure_params: &SLACK_FAILURE
    channel: '#cfp'
    text: |
      <!here> :rotating_light: *$BUILD_PIPELINE_NAME/$BUILD_JOB_NAME* failed with build <$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|$BUILD_NAME>!